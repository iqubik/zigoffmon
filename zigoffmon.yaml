blueprint:
  name: 1.2_Offline detection for Z2M devices with last_seen
  description: Regularly test all sensors with 'last_seen' in name and 'timestamp'
    device_class ('last seen' Z2M sensors) to detect offline and if so execute an
    action.
  domain: automation
    input:
    day:
      name: Weekday to test on
      description: 'Test is run at configured time either everyday (0) or on a given
        weekday (1: Monday ... 7: Sunday)'
      default: 0
      selector:
        number:
          min: 0.0
          max: 7.0
          mode: slider
          step: 1.0
    exclude:
      name: Excluded Sensors
      description: '''last seen'' sensors (from devices that you want to exclude)
        to exclude from detection. Only entities with ''last seen'' in name and ''timestamp''
        in device_class are supported, devices must be expanded!'
      default:
        entity_id: []
      selector:
        target:
          entity:
          - domain:
            - sensor
            - light
            - switch
            - binary_sensor
    actions:
      name: Actions
      description: Notifications or similar to be run. {{sensors}} is replaced with the names of sensors being offline.
      selector:
        action: {}
  source_url: https://gist.github.com/Mr-Groch/bf073b142b507e3b6f8154223f81803b
variables:
  day: !input day
  hours: !input hours
  exclude: !input exclude
  sensors: >
  {% set result = namespace(sensors=[]) %}
  {% for state in states.sensor
    | rejectattr('attributes.device_class', 'undefined')
    | selectattr('attributes.device_class', '==', 'timestamp') %}
    
    {% set is_unavailable = state.state == 'unavailable' %}
    {% set last_seen_exceeded = (as_timestamp(now()) - as_timestamp(state.state)) > (hours | int) * 3600 %}
    {% set is_exempted = state.entity_id in exclude.entity_id %}
    {% set has_last_seen = 'last_seen' in state.entity_id %}
    
    {% if has_last_seen and not is_exempted and (is_unavailable or last_seen_exceeded) %}
      {% set sensor_name = state.name | regex_replace(find=' last seen', replace='') %}
      {% set last_seen_time = (strptime(state.state, '%Y-%m-%dT%H:%M:%S%z') if state.state != 'unavailable' else 'unavailable') %}
      {% set sensor_info = sensor_name ~ ' (' ~ relative_time(last_seen_time) ~ ')' %}
      
      {% set result.sensors = result.sensors + [sensor_info] %}
    {% endif %}
  {% endfor %}
  
  {{ result.sensors | join(', ') }}

trigger:
- platform: time_pattern
  minutes: /1
condition:
- '{{ sensors != '''' and (day | int == 0 or day | int == now().isoweekday()) }}'
action:
- choose: []
  default: !input actions
mode: restart


